{"version":3,"sources":["index.js"],"names":["trainingData","tf","tensor2d","temperatures","map","item","temperatureC","outputData","value","testingData","temperaturesTesting","model","sequential","add","layers","dense","inputShape","activation","units","compile","loss","optimizer","train","adam","startTime","Date","now","fit","epochs","then","history","predict","print"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAGA,MAAMA,YAAY,GAAGC,EAAE,CAACC,QAAH,CAAYC,sBAAaC,GAAb,CAAkBC,IAAI,IAAI,CACzDA,IAAI,CAACC,YADoD,CAA1B,CAAZ,CAArB;AAGA,MAAMC,UAAU,GAAGN,EAAE,CAACC,QAAH,CAAYC,sBAAaC,GAAb,CAAiBC,IAAI,IAAI,CACtDA,IAAI,CAACG,KAAL,KAAe,MAAf,GAAwB,CAAxB,GAA4B,CAD0B,EAEtDH,IAAI,CAACG,KAAL,KAAe,QAAf,GAA0B,CAA1B,GAA8B,CAFwB,EAGtDH,IAAI,CAACG,KAAL,KAAe,MAAf,GAAwB,CAAxB,GAA4B,CAH0B,EAItDH,IAAI,CAACG,KAAL,KAAe,UAAf,GAA4B,CAA5B,GAAgC,CAJsB,EAKtDH,IAAI,CAACG,KAAL,KAAe,qBAAf,GAAuC,CAAvC,GAA2C,CALW,CAAzB,CAAZ,CAAnB;AAOA,MAAMC,WAAW,GAAGR,EAAE,CAACC,QAAH,CAAYQ,sBAAoBN,GAApB,CAAyBC,IAAI,IAAI,CAC/DA,IAAI,CAACC,YAD0D,CAAjC,CAAZ,CAApB;AAIA,MAAMK,KAAK,GAAGV,EAAE,CAACW,UAAH,EAAd;AAEAD,KAAK,CAACE,GAAN,CAAUZ,EAAE,CAACa,MAAH,CAAUC,KAAV,CAAgB;AACxBC,EAAAA,UAAU,EAAE,CAAC,CAAD,CADY;AAExBC,EAAAA,UAAU,EAAE,SAFY;AAGxBC,EAAAA,KAAK,EAAE;AAHiB,CAAhB,CAAV;AAMAP,KAAK,CAACE,GAAN,CAAUZ,EAAE,CAACa,MAAH,CAAUC,KAAV,CAAgB;AACxBE,EAAAA,UAAU,EAAE,SADY;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAAhB,CAAV;AAKAP,KAAK,CAACQ,OAAN,CAAc;AACZC,EAAAA,IAAI,EAAE,kBADM;AAEZC,EAAAA,SAAS,EAAEpB,EAAE,CAACqB,KAAH,CAASC,IAAT,CAAc,GAAd;AAFC,CAAd,GAKA;;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACAf,KAAK,CAACgB,GAAN,CAAU3B,YAAV,EAAwBO,UAAxB,EAAoC;AAACqB,EAAAA,MAAM,EAAE;AAAT,CAApC,EACGC,IADH,CACSC,OAAD,IAAa;AACjB;AACAnB,EAAAA,KAAK,CAACoB,OAAN,CAActB,WAAd,EAA2BuB,KAA3B;AACD,CAJH","file":"index.map","sourceRoot":"..","sourcesContent":["import * as tf from '@tensorflow/tfjs'\nimport '@tensorflow/tfjs-node'\nimport temperatures from './temperatures.json'\nimport temperaturesTesting from './temperatures.json'\n\nconst trainingData = tf.tensor2d(temperatures.map( item => [\n  item.temperatureC\n]))\nconst outputData = tf.tensor2d(temperatures.map(item => [\n  item.value === \"Baja\" ? 1 : 0,\n  item.value === \"Normal\" ? 1 : 0,\n  item.value === \"Alta\" ? 1 : 0,\n  item.value === \"Muy Alta\" ? 1 : 0,\n  item.value === \"Extremadamente Alta\" ? 1 : 0,\n]))\nconst testingData = tf.tensor2d(temperaturesTesting.map( item => [\n  item.temperatureC\n]))\n\nconst model = tf.sequential()\n\nmodel.add(tf.layers.dense({\n  inputShape: [1],\n  activation: \"sigmoid\",\n  units: 5,\n}))\n\nmodel.add(tf.layers.dense({\n  activation: \"sigmoid\",\n  units: 5,\n}))\n\nmodel.compile({\n  loss: \"meanSquaredError\",\n  optimizer: tf.train.adam(.06),\n})\n\n// train/fit our network\nconst startTime = Date.now()\nmodel.fit(trainingData, outputData, {epochs: 100})\n  .then((history) => {\n    // console.log(history)\n    model.predict(testingData).print( )\n  })"]}